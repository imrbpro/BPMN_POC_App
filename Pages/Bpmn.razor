@page "/"
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using System.Collections.ObjectModel 
    <div style="width: 100%">
        <div class="sb-mobile-palette-bar">
            <div id="palette-icon" style="float: right;" role="button" @onclick="ShowHideSymbolPalette" class="e-ddb-icons1 e-toggle-palette"></div>
        </div>
        <div id="palette-space" class="sb-mobile-palette">
            <SfSymbolPaletteComponent @ref="@PaletteInstance"  Palettes="@palettes" SymbolHeight="60" SymbolWidth="60" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent>
        </div>
        <div id="diagram-space" class="sb-mobile-diagram">
            <div class="content-wrapper" style="border: 1px solid #D7D7D7">
                <SfDiagramComponent @ref="@Diagram" Connectors="@connectors" Created="OnCreated" DragDrop="@DragDrop" SelectionChanged="@OnSelectionChanged" Height="687px" GetCustomTool="@GetCustomTool" Nodes="@nodes" SelectionSettings="@selectionSettings" NodeCreating="OnNodeCreating" ConnectorCreating="OnConnectorCreating">
                    <SnapSettings>
                        <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@GridLineIntervals">
                        </HorizontalGridLines>
                        <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@GridLineIntervals">
                        </VerticalGridLines>
                    </SnapSettings>
                    <ContextMenuSettings Show="true"
                                         @bind-Items="@Items"
                                         ContextMenuOpening="@BeforeOpen"
                                         ContextMenuItemClicked="@ItemClicked"></ContextMenuSettings>
                </SfDiagramComponent>
            </div>
        </div>
    </div>
@code{
    DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings();
    FitOptions options = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.PageSettings };
    public DiagramSize SymbolPreview;
    public SymbolMargin SymbolMargin = new SymbolMargin { Left = 15, Right = 15, Top = 15, Bottom = 15 };
    public SfDiagramComponent Diagram;
    public SfSymbolPaletteComponent PaletteInstance;
    DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>();
    //Defines Diagram's nodes collection
    private DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    //Defines Diagram's connectors collection
    private DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
    //Define palettes collection
    private DiagramObjectCollection<Palette> palettes = new DiagramObjectCollection<Palette>();
    // Defines palette's flow-shape collection
    private DiagramObjectCollection<NodeBase> BPMNShapeSymbols = new DiagramObjectCollection<NodeBase>();
    [Inject]
    protected IJSRuntime jsRuntime { get; set; }
    List<ContextMenuItem> Items;
    List<string> Event = new List<string>() { "EventType", "Trigger" };
    List<string> GateWay = new List<string>() { "GateWayType" };
    List<string> Message = new List<string>() { };
    List<string> DataObject = new List<string>() { "Collection", "DataObjectType" };
    List<string> DataStore = new List<string>() { };
    List<string> Activity = new List<string>() { "ActivityType", "Loop", "Compensation", };
    List<string> ActivityTask = new List<string>() { "Call", "TaskType", };
    List<string> ActivityCollapsedSubProcess = new List<string>() { "AdHoc", "Boundary" };
    List<string> ExpandedSubProcess = new List<string>() { "Loop", "AdHoc", "Compensation", "Boundary" };
    List<string> TextAnnotation = new List<string>() { "Orientation" };
    List<string> BpmnSequenceConnector = new List<string>() { "Sequence", "Message", "Association", "Condition" };
    List<string> BpmnMessageConnector = new List<string>() { "Sequence", "Message", "Association", "Initiating" };
    List<string> BpmnAssociationConnector = new List<string>() { "Sequence", "Message", "Association", "Direction" };
    // Defines interval values for GridLines
    public double[] GridLineIntervals { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UpdateHandle();
        }
        PaletteInstance.Targets = new DiagramObjectCollection<SfDiagramComponent>
        {
            Diagram
        };
    }
    private void OnSelectionChanged(SelectionChangedEventArgs args)
    {
        if (args.NewValue.Count > 0 && args.NewValue[0] is Node)
        {
            Diagram.SelectionSettings.Constraints = Diagram.SelectionSettings.Constraints | SelectorConstraints.UserHandle;
        }
        else if (args.NewValue.Count > 0)
        {
            Diagram.SelectionSettings.Constraints = Diagram.SelectionSettings.Constraints & ~SelectorConstraints.UserHandle;
        }
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        Diagram.FitToPage(mobileoptions);
    }
    // Method to customize the tool
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase tool = null;
        if (id == "Draw")
        {
            tool = new DrawTool(Diagram);
        }
        else
        {
            tool = new AddDeleteTool(Diagram);
        }
        return tool;
    }
    // Custom tool to delete the node.
    public class AddDeleteTool : InteractionControllerBase
    {
        SfDiagramComponent sfDiagram;
        Node deleteObject = null;
        public AddDeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            if (sfDiagram.SelectionSettings.Nodes.Count > 0 && ((sfDiagram.SelectionSettings.Nodes[0]) is Node))
            {
                deleteObject = (sfDiagram.SelectionSettings.Nodes[0]) as Node;
            }
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            if (deleteObject != null)
            {
                sfDiagram.StartGroupAction();
                sfDiagram.BeginUpdate();
                sfDiagram.Nodes.Remove(deleteObject);
                _ = sfDiagram.EndUpdate();
                sfDiagram.EndGroupAction();
            }
            base.OnMouseUp(args);
            this.InAction = true;
        }
    }
    public class DrawTool : ConnectorDrawingController
    {
        SfDiagramComponent sfDiagram;
        Connector newConnector = null;
        public DrawTool(SfDiagramComponent Diagram) : base(Diagram, DiagramElementAction.ConnectorSourceEnd)
        {
            sfDiagram = Diagram;
            newConnector = new Connector()
                {
                    ID = "BpmnConnector",
                    SourceID = sfDiagram.SelectionSettings.Nodes[0].ID,
                    Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow },
                    Type = ConnectorSegmentType.Orthogonal,
                };
#pragma warning disable BL0005
            Diagram.InteractionController = DiagramInteractions.DrawOnce;
            Diagram.DrawingObject = newConnector;
#pragma warning restore BL0005
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            base.OnMouseUp(args);
        }
    }
    protected override void OnInitialized()
    {
        GridLineIntervals = new double[] {
            1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
    };
        InitContextItems();
        InitDiagramModel();
        InitPaletteModel();
    }
    // Creates Context menu items.
    private void InitContextItems()
    {
        Items = new List<ContextMenuItem>()
        {
                new ContextMenuItem()
                {
                    Text = "Loop",
                    ID = "bpmn_Loop",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Loop",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Standard",
                    ID = "Loop",
                    IconCss = "e-uncheck", },
                        new ContextMenuItem (){ Text = "Parallel Multi-Instance",
                    ID = "Loop",
                    IconCss = "e-icons e-uncheck", },
                   new ContextMenuItem (){ Text = "Sequential Multi-Instance",
                    ID = "Loop",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Task Type",
                    ID = "bpmn_TaskType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Service",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Receive",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                    new ContextMenuItem (){ Text = "Send",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Instantiating Receive",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Manual",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                    new ContextMenuItem (){ Text = "Business Rule",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "User",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Script",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Compensation",
                    ID = "bpmn_Compensation",
                    IconCss = "e-icons e-uncheck"
                },
                new ContextMenuItem()
                {
                    Text = "Call",
                    ID = "bpmn_Call",
                    IconCss = "e-icons e-uncheck"
                },
                new ContextMenuItem()
                {
                    Text = "Ad-Hoc",
                    ID = "bpmn_AdHoc",
                    IconCss = "e-icons e-uncheck"
                },
                new ContextMenuItem()
                {
                    Text = "Sequence Flow",
                    ID = "bpmn_Sequence",
                    IconCss = "e-icons e-uncheck"
                },
                new ContextMenuItem()
                {
                    Text = "Message Flow",
                    ID = "bpmn_Message",
                    IconCss = "e-icons e-uncheck"
                },
                new ContextMenuItem()
                {
                    Text = "Association",
                    ID = "bpmn_Association",
                    IconCss = "e-icons e-uncheck"
                },
                new ContextMenuItem()
                {
                    Text = "Condition",
                    ID = "bpmn_Condition",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Condition",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Conditional",
                    ID = "Condition",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Default",
                    ID = "Condition",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Initiating",
                    ID = "bpmn_Initiating",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Initiating",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Initiating",
                    ID = "Initiating",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Non-Initiating",
                    ID = "Initiating",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Direction",
                    ID = "bpmn_Direction",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Direction",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "One",
                    ID = "Direction",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Both",
                    ID = "Direction",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Activity Type",
                    ID = "bpmn_ActivityType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "Task",
                    ID = "ActivityType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Collapsed Sub-Process",
                    ID = "ActivityType",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "GateWay Type",
                    ID = "bpmn_GateWayType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Inclusive",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Exclusive",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Parallel",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event Based",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event Based (Exclusive)",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event Based (Parallel)",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Complex",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Event Type",
                    ID = "bpmn_EventType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "Start",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Start (Non-Interrupting)",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Intermediate",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Intermediate (Non-Interrupting)",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Intermediate (Throwing)",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "End",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", }
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Trigger/Result",
                    ID = "bpmn_Trigger",
                    IconCss = "e-uncheck",
                     Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Message",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Timer",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Error",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                     new ContextMenuItem (){ Text = "Compensation",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Conditional",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Signal",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Multiple",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Escalation",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Parallel Multiple",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Link",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Cancel",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Terminate",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Collection",
                    ID = "bpmn_Collection",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Collection",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Collection",
                    ID = "Collection",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Data Object",
                    ID = "bpmn_DataObjectType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "DataObjectType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Input",
                    ID = "DataObjectType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Output",
                    ID = "DataObjectType",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Boundary",
                    ID = "bpmn_Boundary",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "Default",
                    ID = "Boundary",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Call",
                    ID = "Boundary",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event",
                    ID = "Boundary",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Transaction",
                    ID = "Boundary",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                  new ContextMenuItem()
                {
                    Text = "SubProcessTypes",
                    ID = "bpmn_SubProcessTypes",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "SubProcessTypes",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Transaction",
                    ID = "SubProcessTypes",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event",
                    ID = "SubProcessTypes",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Orientation",
                    ID = "bpmn_Orientation",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "Left",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Right",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Top",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Bottom",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Automatic",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "FlowType",
                    ID = "bpmn_FlowType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "AssociationFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "DirectionalAssociationFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "BiDirectionalAssociationFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "MessageFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "InitiatingMessageFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "NonInitiatingMessageFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "SequenceFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "DefaultSequenceFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "ConditionalSequenceFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
        };
    }
    // Create Nodes and Connectors for the diagram.
    private void InitDiagramModel()
    {
        Node node1 = new Node()
            {
                ID = "node1",
                OffsetX = 100,
                OffsetY = 300,
                Width = 50,
                Height = 50,
                Shape = new BpmnEvent() { EventType = BpmnEventType.Start, Trigger = BpmnEventTrigger.None },
                Style = new ShapeStyle() { Fill = "White" },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
            };
        nodes.Add(node1);
        Node node2 = new Node()
            {
                ID = "node2",
                Width = 120,
                Height = 80,
                OffsetX = 250,
                OffsetY = 300,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.Receive },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node1Annotation1",
                                Content = "Receive Book Lending Request",
                                Visibility = true,
                                Style = new TextStyle(){ FontSize = 11, TextAlign = TextAlign.Left,
                                TextWrapping = Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow },
                            },
                }
            };
        nodes.Add(node2);
        Node node3 = new Node()
            {
                ID = "node3",
                Width = 120,
                Height = 80,
                OffsetX = 450,
                OffsetY = 300,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.Service },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node3Annotation1",
                                Content = "Get the Book Status",
                                Visibility = true,
                                Style = new TextStyle(){ FontSize = 11, TextAlign = TextAlign.Left,
                                TextWrapping = Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow },
                            },
                },
            };
        nodes.Add(node3);
        Node node4 = new Node()
            {
                ID = "node4",
                OffsetX = 600,
                OffsetY = 300,
                Width = 90,
                Height = 80,
                Shape = new BpmnGateway() { GatewayType = BpmnGatewayType.None },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 }
            };
        nodes.Add(node4);
        Node node5 = new Node()
            {
                ID = "node5",
                Width = 120,
                Height = 80,
                OffsetX = 800,
                OffsetY = 300,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.Send },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node5Annotation1",
                                Content = "On Load Reply",
                                Visibility = true,
                                Style = new TextStyle(){ FontSize = 11, TextAlign = TextAlign.Left,
                                TextWrapping = Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow },
                            },
                }
            };
        nodes.Add(node5);
        Node node6 = new Node()
            {
                ID = "node6",
                Width = 90,
                Height = 80,
                OffsetX = 950,
                OffsetY = 300,
                Shape = new BpmnGateway() { GatewayType = BpmnGatewayType.EventBased },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 }
            };
        nodes.Add(node6);
        Node node7 = new Node()
            {
                ID = "node7",
                Width = 50,
                Height = 50,
                OffsetX = 1100,
                OffsetY = 200,
                Shape = new BpmnEvent() { EventType = BpmnEventType.Intermediate, Trigger = BpmnEventTrigger.None },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node7Annotation1",
                                Content = "Hold Book",
                                Visibility = true,
                                Offset = new DiagramPoint (){ X = 0.5, Y = 1.25 },
                                Style = new TextStyle(){ FontSize = 11},
                                Width = 100
                            },
                }
            };
        nodes.Add(node7);
        Node node8 = new Node()
            {
                ID = "node8",
                Width = 50,
                Height = 50,
                OffsetX = 1100,
                OffsetY = 300,
                Shape = new BpmnEvent() { EventType = BpmnEventType.Intermediate, Trigger = BpmnEventTrigger.None },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node8Annotation1",
                                Content = "Decline Hold",
                                Visibility = true,
                                Offset = new DiagramPoint (){ X = 0.5, Y = 1.25 },
                                Style = new TextStyle(){ FontSize = 11},
                                Width = 100
                            },
                }
            };
        nodes.Add(node8);
        Node node9 = new Node()
            {
                ID = "node9",
                Width = 50,
                Height = 50,
                OffsetX = 1100,
                OffsetY = 400,
                Shape = new BpmnEvent() { EventType = BpmnEventType.Intermediate, Trigger = BpmnEventTrigger.None },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node9Annotation1",
                                Content = "One Week",
                                Visibility = true,
                                Offset = new DiagramPoint (){ X = 0.5, Y = 1.25 },
                                Style = new TextStyle(){ FontSize = 11},
                                Width = 100
                            },
                }
            };
        nodes.Add(node9);
        Node node10 = new Node()
            {
                ID = "node10",
                Width = 120,
                Height = 80,
                OffsetX = 1250,
                OffsetY = 200,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.Service },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node10Annotation1",
                                Content = "Request Hold",
                                Visibility = true,
                                Style = new TextStyle(){ FontSize = 11, TextAlign = TextAlign.Left,
                                TextWrapping = Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow },
                            },
                }
            };
        nodes.Add(node10);
        Node node11 = new Node()
            {
                ID = "node11",
                Width = 120,
                Height = 80,
                OffsetX = 1450,
                OffsetY = 200,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.Receive },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node11Annotation1",
                                Content = "Hold Reply",
                                Visibility = true,
                                Style = new TextStyle(){ FontSize = 11, TextAlign = TextAlign.Left,
                                TextWrapping = Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow },
                            },
                 }
            };
        nodes.Add(node11);
        Node node12 = new Node()
            {
                ID = "node12",
                Width = 50,
                Height = 50,
                OffsetX = 940,
                OffsetY = 100,
                Shape = new BpmnEvent() { EventType = BpmnEventType.Intermediate, Trigger = BpmnEventTrigger.None },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node12Annotation1",
                                Content = "Two Weeks",
                                Visibility = true,
                                Offset = new DiagramPoint (){ X = 0.5, Y = 1.25 },
                                Style = new TextStyle(){ FontSize = 11},
                                Width = 100,
                            },
                }
            };
        nodes.Add(node12);
        Node node13 = new Node()
            {
                ID = "node13",
                Width = 120,
                Height = 80,
                OffsetX = 800,
                OffsetY = 540,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.User },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node13Annotation1",
                                Content = "Checkout the Book",
                                Visibility = true,
                                Style = new TextStyle(){ FontSize = 11, TextAlign = TextAlign.Left,
                                TextWrapping = Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow },
                            },
                }
            };
        nodes.Add(node13);
        Node node14 = new Node()
            {
                ID = "node14",
                Width = 120,
                Height = 80,
                OffsetX = 1050,
                OffsetY = 540,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.Receive },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node14Annotation1",
                                Content = "Checkout reply",
                                Visibility = true,
                                Style = new TextStyle(){ FontSize = 11, TextAlign = TextAlign.Left,
                                TextWrapping = Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow },
                            },
                }
            };
        nodes.Add(node14);
        Node node15 = new Node()
            {
                ID = "node15",
                Width = 120,
                Height = 80,
                OffsetX = 1250,
                OffsetY = 300,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.Receive },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                            new ShapeAnnotation()
                            {
                                ID = "Node15Annotation1",
                                Content = "Cancel Request",
                                Visibility = true,
                                Style = new TextStyle(){ FontSize = 11, TextAlign = TextAlign.Left,
                                TextWrapping = Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow },
                            },
                }
            };
        nodes.Add(node15);
        Node node16 = new Node()
            {
                ID = "node16",
                OffsetX = 1450,
                OffsetY = 300,
                Width = 50,
                Height = 50,
                Shape = new BpmnEvent() { EventType = BpmnEventType.End, Trigger = BpmnEventTrigger.None },
                Ports = new DiagramObjectCollection<PointPort>() {
                     new PointPort() { ID="port1", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port2", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 0}, Height = 20, Width = 20 },
                     new PointPort() { ID="port3", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 1, Y = 0.5}, Height = 20, Width = 20 },
                     new PointPort() { ID="port4", Visibility = PortVisibility.Hidden, Offset = new DiagramPoint() { X = 0.5, Y = 1}, Height = 20, Width = 20 }
                 }
            };
        nodes.Add(node16);
        Connector connector1 = new Connector() { ID = "connector1", SourceID = "node1", TargetID = "node2", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector1);
        Connector connector2 = new Connector() { ID = "connector2", SourceID = "node2", TargetID = "node3", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector2);
        Connector connector3 = new Connector() { ID = "connector3", SourceID = "node3", TargetID = "node4", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector3);
        Connector connector4 = new Connector() { ID = "connector4", SourceID = "node4", TargetID = "node5", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow }, Annotations = new DiagramObjectCollection<PathAnnotation>() { new PathAnnotation() { Content = "Book is on Loan", Alignment = AnnotationAlignment.Center, Style = new TextStyle() { Fill = "White" }, Width = 60 } } };
        connectors.Add(connector4);
        Connector connector5 = new Connector() { ID = "connector5", SourceID = "node5", TargetID = "node6", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector5);
        Connector connector6 = new Connector() { ID = "connector6", SourceID = "node6", TargetID = "node7", SourcePortID = "port2", TargetPortID = "port1", Type = ConnectorSegmentType.Orthogonal, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector6);
        Connector connector7 = new Connector() { ID = "connector7", SourceID = "node6", TargetID = "node8", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector7);
        Connector connector8 = new Connector() { ID = "connector8", SourceID = "node6", TargetID = "node9", SourcePortID = "port4", TargetPortID = "port1", Type = ConnectorSegmentType.Orthogonal, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector8);
        Connector connector9 = new Connector() { ID = "connector9", SourceID = "node7", TargetID = "node10", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector9);
        Connector connector10 = new Connector() { ID = "connector10", SourceID = "node10", TargetID = "node11", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector10);
        Connector connector11 = new Connector() { ID = "connector11", SourceID = "node11", TargetID = "node12", SourcePortID = "port2", TargetPortID = "port3", Type = ConnectorSegmentType.Orthogonal, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector11);
        Connector connector12 = new Connector() { ID = "connector12", SourceID = "node12", TargetID = "node4", SourcePortID = "port1", TargetPortID = "port2", Type = ConnectorSegmentType.Orthogonal, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector12);
        Connector connector13 = new Connector() { ID = "connector13", SourceID = "node4", TargetID = "node13", SourcePortID = "port4", TargetPortID = "port1", Type = ConnectorSegmentType.Orthogonal, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow }, Annotations = new DiagramObjectCollection<PathAnnotation>() { new PathAnnotation() { Content = "Book is Available", Alignment = AnnotationAlignment.Center, Style = new TextStyle() { Fill = "White" }, Width = 60 } } };
        connectors.Add(connector13);
        Connector connector14 = new Connector() { ID = "connector14", SourceID = "node13", TargetID = "node14", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector14);
        Connector connector15 = new Connector() { ID = "connector15", SourceID = "node8", TargetID = "node15", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector15);
        Connector connector16 = new Connector() { ID = "connector16", SourceID = "node15", TargetID = "node16", SourcePortID = "port3", TargetPortID = "port1", Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector16);
        Connector connector17 = new Connector() { ID = "connector17", SourceID = "node14", TargetID = "node16", SourcePortID = "port3", TargetPortID = "port4", Type = ConnectorSegmentType.Orthogonal, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector17);
        Connector connector18 = new Connector() { ID = "connector18", SourceID = "node9", TargetID = "node15", SourcePortID = "port3", TargetPortID = "port4", Type = ConnectorSegmentType.Orthogonal, Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow } };
        connectors.Add(connector18);
    }
    // Create Nodes and Connectors for the Palette.
    private void InitPaletteModel()
    {
        palettes = new DiagramObjectCollection<Palette>();
        SymbolPreview = new DiagramSize
            {
                Width = 100,
                Height = 100
            };
        BPMNShapeSymbols = new DiagramObjectCollection<NodeBase>();
        Node node1 = new Node()
            {
                ID = "Task",
                Width = 96,
                Height = 72,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.Task, TaskType = BpmnTaskType.None }
            };
        BPMNShapeSymbols.Add(node1);
        Node node2 = new Node()
            {
                ID = "Gateway",
                Width = 96,
                Height = 72,
                Shape = new BpmnGateway() { GatewayType = BpmnGatewayType.None }
            };
        BPMNShapeSymbols.Add(node2);
        Node node3 = new Node()
            {
                ID = "IntermediateEvent",
                Width = 30,
                Height = 30,
                Shape = new BpmnEvent() { EventType = BpmnEventType.Intermediate, Trigger = BpmnEventTrigger.None },
                Tooltip = new DiagramTooltip()
                {
                    Content="Intermediate Event"
                },
                Constraints = NodeConstraints.Default | NodeConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(node3);
        Node node4 = new Node()
            {
                ID = "EndEvent",
                Width = 30,
                Height = 30,
                Shape = new BpmnEvent() { EventType = BpmnEventType.End, Trigger = BpmnEventTrigger.None },
                Tooltip = new DiagramTooltip()
                {
                    Content="End Event"
                },
                Constraints = NodeConstraints.Default | NodeConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(node4);
        Node node5 = new Node()
            {
                ID = "StartEvent",
                Width = 30,
                Height = 30,
                Shape = new BpmnEvent() { EventType = BpmnEventType.Start, Trigger = BpmnEventTrigger.None },
                Tooltip = new DiagramTooltip()
                {
                    Content="Start Event"
                },
                Constraints = NodeConstraints.Default | NodeConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(node5);
        Node node6 = new Node()
            {
                ID = "CollapsedSub-Process",
                Width = 96,
                Height = 72,
                Shape = new BpmnActivity() { ActivityType = BpmnActivityType.CollapsedSubProcess },
                Tooltip = new DiagramTooltip()
                {
                    Content="Collapsed Sub-Process"
                },
                Constraints = NodeConstraints.Default | NodeConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(node6);
        Node node7 = new Node()
            {
                ID = "ExpandedSub-Process",
                Width = 96,
                Height = 72,
                Shape = new BpmnExpandedSubProcess(),
                Tooltip = new DiagramTooltip()
                {
                    Content="Expanded Sub-Process"
                },
                Constraints = NodeConstraints.Default | NodeConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(node7);
        Node node8 = new Node()
            {
                ID = "TextAnnotation",
                Width = 96,
                Height = 72,
                Shape = new BpmnTextAnnotation(),
                Tooltip = new DiagramTooltip()
                {
                    Content="Text Annotation"
                },
                Constraints = NodeConstraints.Default | NodeConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(node8);
        Connector connector1 = new Connector()
            {
                ID = "SequenceFlow",
                SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
                TargetPoint = new DiagramPoint() { X = 60, Y = 60 },
                Type = ConnectorSegmentType.Straight,
                Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow },
                Tooltip = new DiagramTooltip()
                {
                    Content="Sequence Flow"
                },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(connector1);
        Connector connector2 = new Connector() { ID = "Association", SourcePoint = new DiagramPoint() { X = 0, Y = 0 }, TargetPoint = new DiagramPoint() { X = 60, Y = 60 }, Type = ConnectorSegmentType.Straight, Shape = new BpmnFlow() { Flow = BpmnFlowType.AssociationFlow }, };
        BPMNShapeSymbols.Add(connector2);
        Connector connector3 = new Connector() { ID = "MessageFlow", SourcePoint = new DiagramPoint() { X = 0, Y = 0 }, TargetPoint = new DiagramPoint() { X = 60, Y = 60 }, Type = ConnectorSegmentType.Straight, TargetDecorator = new DecoratorSettings() {Style = new ShapeStyle() { Fill = "white"} },Style = new ShapeStyle() { StrokeDashArray = "5 5"},Tooltip = new DiagramTooltip()
                {
                    Content="Message Flow"
                },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip};
        BPMNShapeSymbols.Add(connector3);
        Node node9 = new Node()
            {
                ID = "Message",
                Width = 72,
                Height = 48,
                Shape = new BpmnMessage()
            };
        BPMNShapeSymbols.Add(node9);
        Node node10 = new Node()
            {
                ID = "DataObject",
                Width = 48,
                Height = 62,
                Shape = new BpmnDataObject() { IsCollectiveData = false, DataObjectType = BpmnDataObjectType.None },
                Tooltip = new DiagramTooltip()
                {
                    Content="Data Object"
                },
                Constraints = NodeConstraints.Default | NodeConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(node10);
        Node node11 = new Node()
            {
                ID = "DataStore",
                Width = 96,
                Height = 76,
                Shape = new BpmnDataStore(),
                Tooltip = new DiagramTooltip()
                {
                    Content="Data Store"
                },
                Constraints = NodeConstraints.Default | NodeConstraints.Tooltip
            };
        BPMNShapeSymbols.Add(node11);
        palettes = new DiagramObjectCollection<Palette>()
        {
            #pragma warning disable BL0005
            new Palette() {Symbols = BPMNShapeSymbols, Title = "BPMN Shapes", ID = "BPMNShapes", IconCss = "e-ddb-icons e-flow"},
            #pragma warning restore BL0005
        };
    }
    private void DragDrop( DropEventArgs args)
    {
        if (args.Element != null && args.Element is Connector connector)
        { 
            if (connector.ID.Contains("Message Flow"))
                connector.Shape = new BpmnFlow() { Flow = BpmnFlowType.MessageFlow };
        }
        if (args.Element is Node node && node.Tooltip != null)
        {
            node.Tooltip = null;
            node.Constraints &= ~NodeConstraints.Tooltip;
        }
        else if (args.Element is Connector connector1 && connector1.Tooltip != null)
        {
            connector1.Tooltip = null;
            connector1.Constraints &= ~ConnectorConstraints.Tooltip;
        }
    }
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        if (node.Shape is BpmnEvent)
        {
            node.Width = 50;
            node.Height = 50;
        }
        else if (node.Shape is BpmnMessage)
        {
            node.Width = 72;
            node.Height = 48;
        }
        else if (node.Shape is BpmnDataObject)
        {
            node.Width = 48;
            node.Height = 62;
        }
        else if (node.Shape is BpmnDataStore)
        {
            node.Width = 96;
            node.Height = 72;
        }
        else if (node.Shape is BpmnActivity bpmnActivity)
        {
            node.Width = 120;
            node.Height = 80;
        }
        else if (node.Shape is BpmnGateway)
        {
            node.Width = 90;
            node.Height = 80;
        }
        else if (node.Shape is BpmnTextAnnotation)
        {
            node.Width = 96;
            node.Height = 72;
        }
        else if (node.Shape is BpmnExpandedSubProcess)
        {
            node.Width = 300;
            node.Height = 300;
        }
        node.Constraints = node.Constraints |= NodeConstraints.AllowDrop;
    }
    private void SymbolNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
    }
    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector node = obj as Connector;
        node.Style.Fill = "black";
        node.Style.StrokeColor = "black";
        node.Style.Opacity = 1;
        node.TargetDecorator.Style.Fill = "black";
        node.TargetDecorator.Style.StrokeColor = "black";
    }
    private void UpdateHandle()
    {
        UserHandle deleteHandle = AddHandle("Delete", "delete", Direction.Bottom, 0.5);
        UserHandle drawHandle = AddHandle("Draw", "draw", Direction.Right, 0.5);
        handles.Add(deleteHandle);
        handles.Add(drawHandle);
        selectionSettings.UserHandles = handles;
    }
    private UserHandle AddHandle(string name, string path, Direction direction, double offset)
    {
        UserHandle handle = new UserHandle()
            {
                Name = name,
                Visible = true,
                Offset = offset,
                Side = direction,
                Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
            };
        if (path == "delete")
        {
            handle.PathData = "M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z";
        }
        else
        {
            handle.PathData = "M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z";
        }
        return handle;
    }
    private void ItemClicked(DiagramMenuClickEventArgs args)
    {
        if (Diagram.SelectionSettings.Nodes.Count != 0 && Diagram.SelectionSettings.Connectors.Count == 0)
        {
            Node node = Diagram.SelectionSettings.Nodes[0];
            if (args.Item.ID == "Loop")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.None;
                            }
                            break;
                        case "Standard":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.Standard;
                            }
                            break;
                        case "Parallel Multi-Instance":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.ParallelMultiInstance;
                            }
                            break;
                        case "Sequential Multi-Instance":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.SequenceMultiInstance;
                            }
                            break;
                    }
                }
                else if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.None;
                            }
                            break;
                        case "Standard":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.Standard;
                            }
                            break;
                        case "Parallel Multi-Instance":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.ParallelMultiInstance;
                            }
                            break;
                        case "Sequential Multi-Instance":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.SequenceMultiInstance;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "TaskType")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.None;
                            }
                            break;
                        case "Service":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Service;
                            }
                            break;
                        case "Receive":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Receive;
                            }
                            break;
                        case "Send":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Send;
                            }
                            break;
                        case "Instantiating Receive":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.InstantiatingReceive;
                            }
                            break;
                        case "Manual":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Manual;
                            }
                            break;
                        case "Business Rule":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.BusinessRule;
                            }
                            break;
                        case "User":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.User;
                            }
                            break;
                        case "Script":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Script;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "bpmn_Compensation")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsCompensation = !bpmnActivity.IsCompensation;
                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    bpmnExpandedSubProcess.IsCompensation = !bpmnExpandedSubProcess.IsCompensation;
                }
            }
            else if (args.Item.ID == "bpmn_Call")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsCall = !bpmnActivity.IsCall;
                }
            }
            else if (args.Item.ID == "ActivityType")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "Task":
                            {
                                bpmnActivity.ActivityType = BpmnActivityType.Task;
                            }
                            break;
                        case "Collapsed Sub-Process":
                            {
                                bpmnActivity.ActivityType = BpmnActivityType.CollapsedSubProcess;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "GateWayType")
            {
                if (node.Shape is BpmnGateway bpmnGateway)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.None;
                            }
                            break;
                        case "Exclusive":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Exclusive;
                            }
                            break;
                        case "Inclusive":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Inclusive;
                            }
                            break;
                        case "Parallel":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Parallel;
                            }
                            break;
                        case "Complex":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Complex;
                            }
                            break;
                        case "Event Based":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.EventBased;
                            }
                            break;
                        case "Event Based (Exclusive)":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.ExclusiveEventBased;
                            }
                            break;
                        case "Event Based (Parallel)":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.ParallelEventBased;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Event Type")
            {
                if (node.Shape is BpmnEvent bpmnSubEvent)
                {
                    switch (args.Item.Text)
                    {
                        case "Start":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.Start;
                            }
                            break;
                        case "Intermediate":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.Intermediate;
                            }
                            break;
                        case "End":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.End;
                            }
                            break;
                        case "Start (Non-Interrupting)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.NonInterruptingStart;
                            }
                            break;
                        case "Intermediate (Non-Interrupting)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.NonInterruptingIntermediate;
                            }
                            break;
                        case "Intermediate (Throwing)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.ThrowingIntermediate;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Trigger")
            {
                if (node.Shape is BpmnEvent bpmnSubEvent)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.None;
                            }
                            break;
                        case "Message":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Message;
                            }
                            break;
                        case "Timer":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Timer;
                            }
                            break;
                        case "Escalation":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Escalation;
                            }
                            break;
                        case "Link":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Link;
                            }
                            break;
                        case "Error":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Error;
                            }
                            break;
                        case "Compensation":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Compensation;
                            }
                            break;
                        case "Signal":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Signal;
                            }
                            break;
                        case "Multiple":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Multiple;
                            }
                            break;
                        case "Parallel Multiple":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Parallel;
                            }
                            break;
                        case "Cancel":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Cancel;
                            }
                            break;
                        case "Conditional":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Conditional;
                            }
                            break;
                        case "Terminate":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Terminate;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Collection")
            {
                if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnDataObject.IsCollectiveData = false;
                            }
                            break;
                        case "Collection":
                            {
                                bpmnDataObject.IsCollectiveData = true;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "DataObjectType")
            {
                if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.None;
                            }
                            break;
                        case "Input":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.Input;
                            }
                            break;
                        case "Output":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.Output;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Boundary")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                    {
                        switch (args.Item.Text)
                        {
                            case "Default":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Default;
                                }
                                break;
                            case "Call":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Call;
                                }
                                break;
                            case "Event":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Event;
                                }
                                break;
                            case "Transaction":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Transaction;
                                }
                                break;
                        }
                    }
                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    switch (args.Item.Text)
                    {
                        case "Default":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Default;
                            }
                            break;
                        case "Call":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Call;
                            }
                            break;
                        case "Event":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Event;
                            }
                            break;
                        case "Transaction":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Transaction;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.Text == "Ad-Hoc")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsAdhoc = !bpmnActivity.IsAdhoc;
                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    bpmnExpandedSubProcess.IsAdhoc = !bpmnExpandedSubProcess.IsAdhoc;
                }
            }
            else if (args.Item.ID == "Orientation")
            {
                if (node.Shape is BpmnTextAnnotation bpmnTextAnnotation)
                {
                    switch (args.Item.Text)
                    {
                        case "Automatic":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Auto;
                            }
                            break;
                        case "Left":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Left;
                            }
                            break;
                        case "Right":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Right;
                            }
                            break;
                        case "Top":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Top;
                            }
                            break;
                        case "Bottom":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Bottom;
                            }
                            break;
                    }
                }
            }
        }
        else if (Diagram.SelectionSettings.Nodes.Count == 0 && Diagram.SelectionSettings.Connectors.Count != 0)
        {
            Connector connector = Diagram.SelectionSettings.Connectors[0];
            if (connector.Shape is BpmnFlow bpmnShape)
            { 
                if (args.Item.ID == "bpmn_Sequence")
                {
                    bpmnShape.Flow = BpmnFlowType.SequenceFlow;
                } 
                if (args.Item.ID == "bpmn_Message")
                {
                    bpmnShape.Flow = BpmnFlowType.MessageFlow;
                }
                if (args.Item.ID == "bpmn_Association")
                {
                    bpmnShape.Flow = BpmnFlowType.AssociationFlow;
                }
                if (args.Item.ID == "Direction")
                {
                    if (args.Item.Text == "None")
                    {
                        bpmnShape.Flow = BpmnFlowType.AssociationFlow;
                    }
                    else if (args.Item.Text == "One")
                    {
                        bpmnShape.Flow = BpmnFlowType.DirectionalAssociationFlow;
                    }
                    else if (args.Item.Text == "Both")
                    {
                        bpmnShape.Flow = BpmnFlowType.BiDirectionalAssociationFlow;
                    }
                }
                if (args.Item.ID == "Condition")
                {
                    if (args.Item.Text == "None")
                    {
                        bpmnShape.Flow = BpmnFlowType.SequenceFlow;
                    }
                    else if (args.Item.Text == "Default")
                    {
                        bpmnShape.Flow = BpmnFlowType.DefaultSequenceFlow;
                    }
                    else if (args.Item.Text == "Conditional")
                    {
                        bpmnShape.Flow = BpmnFlowType.ConditionalSequenceFlow;
                    }
                }
                if (args.Item.ID == "Initiating")
                {
                    if (args.Item.Text == "None")
                    {
                        bpmnShape.Flow = BpmnFlowType.MessageFlow;
                    }
                    else if (args.Item.Text == "Initiating")
                    {
                        bpmnShape.Flow = BpmnFlowType.InitiatingMessageFlow;
                    }
                    else if (args.Item.Text == "Non-Initiating")
                    {
                        bpmnShape.Flow = BpmnFlowType.NonInitiatingMessageFlow;
                    }
                }
            }
        }
    }
    private void BeforeOpen(DiagramMenuOpeningEventArgs args)
    {
        if (Diagram.SelectionSettings.Nodes.Count != 0 && Diagram.SelectionSettings.Connectors.Count == 0)
        {
            Node node = Diagram.SelectionSettings.Nodes[0];
            if (node.Shape.Type == NodeShapes.Bpmn)
            {
                if (node.Shape is BpmnEvent bpmnEvent)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !Event.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Event.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Event Type")
                            {
                                if (bpmnEvent.EventType == BpmnEventType.Start)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Start")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.NonInterruptingStart)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Start (Non-Interrupting)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.Intermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.NonInterruptingIntermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate (Non-Interrupting)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.ThrowingIntermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate (Throwing)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.End)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "End")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Trigger/Result")
                            {
                                if (bpmnEvent.Trigger == BpmnEventTrigger.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Error)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Error")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Timer)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Timer")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Terminate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Terminate")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Multiple)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Multiple")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Message)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Message")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Cancel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Cancel")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Compensation)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Compensation")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Conditional)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Conditional")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Error)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Error")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Parallel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multiple")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Link)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Link")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnGateway bpmnGateway)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !GateWay.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && GateWay.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "GateWay Type")
                            {
                                if (bpmnGateway.GatewayType == BpmnGatewayType.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.Inclusive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Inclusive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.Exclusive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Exclusive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.Parallel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.EventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.ExclusiveEventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based (Exclusive)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.ParallelEventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based (Parallel)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.Complex)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Complex")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnMessage)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !Message.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Message.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                    }
                }
                else if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !DataObject.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && DataObject.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Collection")
                            {
                                foreach (var subItem in item.Items)
                                {
                                    if ((subItem.Text == "Collection" && bpmnDataObject.IsCollectiveData) || (subItem.Text == "None" && !bpmnDataObject.IsCollectiveData))
                                    {
                                        subItem.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        subItem.IconCss = "e-icons e-uncheck";
                                    }
                                }
                            }
                            if (item.Text == "Data Object")
                            {
                                foreach (var subItem in item.Items)
                                {
                                    if (subItem.Text == bpmnDataObject.Type.ToString())
                                    {
                                        subItem.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        subItem.IconCss = "e-icons e-uncheck";
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnDataStore)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !DataStore.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                    }
                }
                else if (node.Shape is BpmnActivity bpmnActivity)
                {
                    foreach (var item in args.Items)
                    {
                        if (bpmnActivity.ActivityType == BpmnActivityType.Task)
                        {
                            if (item.ID.Split('_')[0] == "bpmn" && !(Activity.Contains(item.ID.Split('_')[1]) || ActivityTask.Contains(item.ID.Split('_')[1])))
                            {
                                args.HiddenItems.Add(item.ID);
                            }
                            if (item.Text == "Task Type")
                            {
                                if (bpmnActivity.TaskType == BpmnTaskType.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Service)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Service")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Receive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Receive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Send)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Send")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.InstantiatingReceive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Instantiating Receive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Manual)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Manual")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.BusinessRule)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Business Rule")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.User)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "User")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Script)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Script")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Call")
                            {
                                if (bpmnActivity.IsCall)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                        }
                        if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                        {
                            if (item.ID.Split('_')[0] == "bpmn" && !(Activity.Contains(item.ID.Split('_')[1]) || ActivityCollapsedSubProcess.Contains(item.ID.Split('_')[1])))
                            {
                                args.HiddenItems.Add(item.ID);
                            }
                            if (item.ID.Split('_')[0] == "bpmn" && ActivityCollapsedSubProcess.Contains(item.ID.Split('_')[1]))
                            {
                                if (item.Text == "Ad-Hoc")
                                {
                                    if (bpmnActivity.IsAdhoc)
                                    {
                                        item.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        item.IconCss = "e-icons e-uncheck";
                                    }
                                }
                                if (item.Text == "Boundary")
                                {
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Default)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Default")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Event)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Event")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Call)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Call")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Transaction)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Transaction")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Activity.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Loop")
                            {
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.Standard)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Standard")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.ParallelMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.SequenceMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Sequential Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Compensation")
                            {
                                if (bpmnActivity.IsCompensation)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Activity Type")
                            {
                                if (bpmnActivity.ActivityType == BpmnActivityType.Task)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Task")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Collapsed Sub-Process")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !ExpandedSubProcess.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && ExpandedSubProcess.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Loop")
                            {
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.Standard)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Standard")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.ParallelMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.SequenceMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Sequential Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Compensation")
                            {
                                if (bpmnExpandedSubProcess.IsCompensation)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Ad-Hoc")
                            {
                                if (bpmnExpandedSubProcess.IsAdhoc)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Boundary")
                            {
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Default)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Default")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Event)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Call)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Call")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Transaction)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Transaction")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnTextAnnotation bpmnTextAnnotation)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !TextAnnotation.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && TextAnnotation.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Orientation")
                            {
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Left)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Left")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Right)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Right")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Top)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Top")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Bottom)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Bottom")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Auto)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Automatic")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else if (Diagram.SelectionSettings.Nodes.Count == 0 && Diagram.SelectionSettings.Connectors.Count != 0)
        {
            Connector connector = Diagram.SelectionSettings.Connectors[0];
            Node node = (Node)Diagram.GetObject(connector.TargetID);
            if (connector.Shape is BpmnFlow bpmnShape)
            {
                foreach (var item in args.Items)
                {
                    if (bpmnShape.Flow == BpmnFlowType.AssociationFlow || bpmnShape.Flow == BpmnFlowType.BiDirectionalAssociationFlow || bpmnShape.Flow == BpmnFlowType.DirectionalAssociationFlow)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && (!BpmnAssociationConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && (BpmnAssociationConnector.Contains(item.ID.Split('_')[1])))
                        {
                            if (item.Text == "Association")
                            {
                                item.IconCss = "e-icons e-check";
                            }
                            else
                            {
                                item.IconCss = "e-icons e-uncheck";
                            }
                            if (item.Text == "Direction")
                            {
                                if (bpmnShape.Flow == BpmnFlowType.AssociationFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.DirectionalAssociationFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "one")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.BiDirectionalAssociationFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Both")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (bpmnShape.Flow == BpmnFlowType.MessageFlow || bpmnShape.Flow == BpmnFlowType.NonInitiatingMessageFlow || bpmnShape.Flow == BpmnFlowType.InitiatingMessageFlow)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && (!BpmnMessageConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && (BpmnMessageConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            if (item.Text == "Message Flow")
                            {
                                item.IconCss = "e-icons e-check";
                            }
                            else
                            {
                                item.IconCss = "e-icons e-uncheck";
                            }
                            if (item.Text == "Initiating")
                            {
                                if (bpmnShape.Flow == BpmnFlowType.MessageFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.InitiatingMessageFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Initiating")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.NonInitiatingMessageFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Non-Initiating")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (bpmnShape.Flow == BpmnFlowType.SequenceFlow || bpmnShape.Flow == BpmnFlowType.ConditionalSequenceFlow || bpmnShape.Flow == BpmnFlowType.DefaultSequenceFlow)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && (!BpmnSequenceConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && (BpmnSequenceConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            if (item.Text == "Sequence Flow")
                            {
                                item.IconCss = "e-icons e-check";
                            }
                            else
                            {
                                item.IconCss = "e-icons e-uncheck";
                            }
                            if (item.Text == "Condition")
                            {
                                if (bpmnShape.Flow == BpmnFlowType.SequenceFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.ConditionalSequenceFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Conditional")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.DefaultSequenceFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Default")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else if (Diagram.SelectionSettings.Nodes.Count == 0 && Diagram.SelectionSettings.Connectors.Count == 0)
        {
            foreach (var item in args.Items)
            {
                if (item.ID.Split('_')[0] == "bpmn")
                {
                    args.HiddenItems.Add(item.ID);
                }
            }
        }
    }
    private void FillChange()
    {
        if (Diagram.SelectionSettings.Nodes.Count > 0)
        {
            foreach (Node node in Diagram.SelectionSettings.Nodes)
            {
                node.Style.Fill = "#a4e56d";
            }
        }
    }
    string data;
    private void Save()
    {
        data = Diagram.SaveDiagram();
    }
    private async Task Load()
    {
        await Diagram.LoadDiagram(data);
    }
    public async Task ShowHideSymbolPalette()
    {
        await jsRuntime.InvokeAsync<object>("openPalette");
    }
    public void Dispose()
    {
        if (SymbolPreview != null)
        {
            SymbolPreview = null;
        }
        if (SymbolMargin != null)
        {
            SymbolMargin = null;
        }
        Diagram = null;
        PaletteInstance = null;
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
#pragma warning disable BL0005
        if (palettes != null)
        {
            for (int i = 0; i < palettes.Count; i++)
            {
                palettes[i].ID = null;
                palettes[i].Title = null;
                palettes[i].IconCss = null;
                if (palettes[i].Symbols != null)
                {
                    for (int j = 0; j < palettes[i].Symbols.Count; j++)
                    {
                        palettes[i].Symbols[j] = null;
                    }
                    palettes[i].Symbols.Clear();
                    palettes[i].Symbols = null;
                }
            }
            palettes.Clear();
            palettes = null;
        }
#pragma warning restore BL0005
        if (BPMNShapeSymbols != null)
        {
            BPMNShapeSymbols.Clear();
            BPMNShapeSymbols = null;
        }
        if (GridLineIntervals != null)
        {
            Array.Clear(GridLineIntervals, 0, GridLineIntervals.Length);
            GridLineIntervals = null;
        }
        if (Items != null)
        {
            Items.Clear();
        }
    }
    @*End:Hidden*@
}